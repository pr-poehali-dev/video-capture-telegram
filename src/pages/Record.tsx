import { useState } from 'react';
import { Badge } from '@/components/ui/badge';
import { toast } from '@/components/ui/use-toast';
import QRCodeSection from '@/components/record/QRCodeSection';
import PromoterForm from '@/components/record/PromoterForm';
import VideoRecorder from '@/components/record/VideoRecorder';

const Record = () => {
  const [isRecording, setIsRecording] = useState(false);
  const [recordedVideo, setRecordedVideo] = useState<Blob | null>(null);
  const [currentStep, setCurrentStep] = useState<'record' | 'preview' | 'send'>('record');
  const [quality, setQuality] = useState('720p');
  const [isUploading, setIsUploading] = useState(false);
  const [promoterName, setPromoterName] = useState('');

  // Telegram Bot configuration
  const TELEGRAM_BOT_TOKEN = '8286818285:AAGqkSsTlsbKCT1guKYoDpkL_OcldAVyuSE';
  const TELEGRAM_CHAT_ID = '5215501225'; // @maxim_korel

  const sendToTelegram = async () => {
    if (!recordedVideo) return;

    setIsUploading(true);
    
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ MIME type
      const mimeType = recordedVideo.type || 'video/webm';
      const extension = mimeType.includes('mp4') ? '.mp4' : '.webm';
      const fileName = `video_${Date.now()}${extension}`;
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MIME type
      const videoFile = new File([recordedVideo], fileName, { 
        type: mimeType,
        lastModified: Date.now()
      });

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
      const locationData = localStorage.getItem('userLocation');
      let locationText = '';
      
      if (locationData) {
        try {
          const location = JSON.parse(locationData);
          const googleMapsUrl = `https://maps.google.com/?q=${location.latitude},${location.longitude}`;
          locationText = `\nüìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${googleMapsUrl}`;
          if (location.accuracy) {
            locationText += `\nüéØ –¢–æ—á–Ω–æ—Å—Ç—å: ${Math.round(location.accuracy)}–º`;
          }
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', e);
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ—É—Ç–µ—Ä–∞
      let promoterText = '';
      if (promoterName.trim()) {
        promoterText = `üë§ –ü—Ä–æ–º–æ—É—Ç–µ—Ä: ${promoterName.trim()}`;
      }

      // –°–æ–∑–¥–∞–µ–º caption –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ "–í–∏–¥–µ–æ"
      const captionParts = [promoterText, locationText].filter(part => part.trim());
      const caption = captionParts.join('\n');

      const formData = new FormData();
      formData.append('chat_id', TELEGRAM_CHAT_ID);
      formData.append('video', videoFile);
      if (caption) {
        formData.append('caption', caption);
      }
      formData.append('supports_streaming', 'true');

      const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendVideo`;
      
      const response = await fetch(telegramUrl, {
        method: 'POST',
        body: formData,
        mode: 'cors',
      });

      const result = await response.json();

      if (response.ok && result.ok) {
        toast({ 
          title: "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ú–∞–∫—Å–∏–º—É!", 
          description: "–í–∏–¥–µ–æ, –∞–Ω–∫–µ—Ç–∞ –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ Telegram" 
        });
        setCurrentStep('send');
      } else {
        console.error('Telegram API error:', result);
        throw new Error(result.description || '–û—à–∏–±–∫–∞ Telegram API');
      }
    } catch (error) {
      console.error('Error sending to Telegram:', error);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      let errorMessage = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ";
      
      if (error instanceof TypeError && error.message.includes('Failed to fetch')) {
        errorMessage = "CORS –æ—à–∏–±–∫–∞ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
      } else if (error.message && error.message.includes('chat not found')) {
        errorMessage = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
      } else if (error.message && error.message.includes('bot token')) {
        errorMessage = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞";
      } else if (error.message && error.message.includes('Forbidden')) {
        errorMessage = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥";
      }
      
      toast({ 
        title: "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", 
        description: errorMessage,
        variant: "destructive" 
      });
    } finally {
      setIsUploading(false);
    }
  };

  const resetRecording = () => {
    setRecordedVideo(null);
    setCurrentStep('record');
    setPromoterName(''); // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ —Å–±—Ä–æ—Å–µ
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-gray-50">
      {/* Header */}
      <div className="bg-white/80 backdrop-blur-sm border-b">
        <div className="max-w-6xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <h1 className="text-xl font-semibold text-gray-900">IMPERIA PROMO</h1>
            {isRecording && (
              <Badge variant="destructive">
                –ó–∞–ø–∏—Å—å...
              </Badge>
            )}
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 py-6">
        {/* Three Column Layout */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 h-full">
          
          {/* Left Column - QR Code */}
          <QRCodeSection />

          {/* Middle Column - Promoter Form */}
          <PromoterForm 
            promoterName={promoterName}
            setPromoterName={setPromoterName}
          />

          {/* Right Column - Video Recording */}
          <VideoRecorder
            isRecording={isRecording}
            setIsRecording={setIsRecording}
            recordedVideo={recordedVideo}
            setRecordedVideo={setRecordedVideo}
            currentStep={currentStep}
            setCurrentStep={setCurrentStep}
            quality={quality}
            setQuality={setQuality}
            isUploading={isUploading}
            promoterName={promoterName}
            onSendToTelegram={sendToTelegram}
            onResetRecording={resetRecording}
          />

        </div>
      </div>
    </div>
  );
};

export default Record;